#+STARTUP: content

* General
** System settings

#+BEGIN_SRC emacs-lisp
  ;; i18n
  (prefer-coding-system 'utf-8)

  ;; Reduce the frequency of garbage collection by making it happen on
  ;; each 50MB of allocated data (the default is on every 0.76MB)
  (setq gc-cons-threshold 50000000)

  ;; Warn when opening files bigger than 100MB
  (setq large-file-warning-threshold 100000000)

  ;; Add to exec-path (Emacs equivalent to $PATH)
  ;; (add-to-list 'exec-path "/usr/local/bin/")
  ;; (add-to-list 'exec-path "/usr/local/go/bin")
  ;; (add-to-list 'exec-path "~/code/go/bin")
  (use-package exec-path-from-shell
  :init
  (exec-path-from-shell-initialize))
#+END_SRC

** Personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ross Timson"
        user-mail-address "ross@rosstimson.com")
#+END_SRC

** Backups

Put backups in a sensible location rather than scattered all over the place.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk is cheap. Save lots.

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)    ; Don't delink hardlings
  (setq version-control t)      ; Use version numbers on backups
  (setq delete-old-versions t)  ; Automatically delete excess backups
  (setq kept-new-versions 20)   ; How many of the newest versions to keep
  (setq kept-old-versions 5)    ; How many of the oldest version to keep
#+END_SRC

** Interface

Remove a bunch of cruft from the interface.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        inhibit-startup-message t
        inihibt-startup-echo-area-message "rosstimson")
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Set some further UI options.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (blink-cursor-mode -1)
  (global-hl-line-mode t)
  (line-number-mode t)
  (column-number-mode t)
  (setq-default indicate-empty-lines t)
#+END_SRC

Stop the annoying bloody beeping.

#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

Set default font.

#+BEGIN_SRC emacs-lisp
  (set-default-font "Hack-10")
#+END_SRC

Stop resizing the frame all the time and just start emacs maximised.

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC

Short form yes/no questions.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p #'y-or-n-p)
#+END_SRC

Smooth scrolling.

#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 5
        scroll-conservatively 9999
        scroll-step 1)
#+END_SRC

Set my preferred colour theme.

#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :init (load-theme 'sanityinc-tomorrow-night 'no-confirm))
#+END_SRC

Allow easy movement between windows/splits.

#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
#+END_SRC

** Recent files

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :config
    (setq recentf-max-saved-items 50
          recentf-auto-cleanup 100
          recentf-exclude (list "/\\.git/.*\\'" ; Git contents
                                "/elpa/.*\\'"   ; Package files
                                ".*\\.gz\\'"
                                "TAGS"
                                ".*-autoloads\\.el\\'"
                                "/tmp"
                                "/ssh:"
                                "company-statistics-cache\.el"
                                "custom\.el"))
    (recentf-mode t))
#+END_SRC

** iBuffer

Use [[https://www.emacswiki.org/emacs/IbufferMode][ibuffer]] which is a better menu/switcher for buffers.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (autoload 'ibuffer "ibuffer" "List buffers." t)
#+END_SRC

** Eshell

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :commands eshell
    :bind ("C-x e" . eshell)
    :init
    (setq eshell-aliases-file (concat user-emacs-directory "eshell.aliases")
	  eshell-cmpl-ignore-case t
	  eshell-history-size 1024)

    ;; Visual commands
    (setq eshell-visual-commands '("vi" "vim" "top" "htop" "less" "more" "tmux"))
    (setq eshell-visual-subcommands '(("git" "log" "diff" "show"))))
#+END_SRC

Make C-l clear eshell screen just as it would a normal shell.

#+BEGIN_SRC emacs-lisp
  (defun eshell-clear-buffer ()
    "Clear terminal"
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))

  (add-hook 'eshell-mode-hook
	'(lambda()
            (local-set-key (kbd "C-l") 'eshell-clear-buffer)))
#+END_SRC

** EasyPG / Encryption

Disable external GPG PIN entry, let Emacs handle it.

#+BEGIN_SRC emacs-lisp
  (setenv "GPG_AGENT_INFO" nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :ensure nil
    :config
    (setq epa-armor t))
#+END_SRC

* Minor Modes
** which-key

[[https://github.com/justbur/emacs-which-key][which-key]] is a package that displays available keybindings in popup.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode t))
#+END_SRC

** Ivy / Counsel / Swiper

Use [[https://github.com/abo-abo/swiper][Swiper]] and friends for searching and ido-like completion.

Ivy, a generic completion mechanism for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :bind (("C-x b" . ivy-switch-buffer)
           ("C-c C-r" . ivy-resume))
    :config
    (ivy-mode)
    (setq ivy-fixed-height-minibuffer t)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-format-function 'ivy-format-function-line) ; Highlight entire line in Ivy completion buffer.
    :diminish ivy-mode)
#+END_SRC

Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

#+BEGIN_SRC emacs-lisp
    (use-package counsel
      :bind (("M-x" . counsel-M-x)
             ("C-x C-f" . counsel-find-file)
             ("C-x f" . counsel-recentf)
             ("C-c k" . counsel-pt)
             ("C-c i" . counsel-imenu)
	     ("M-y" . counsel-yank-pop)
	     :map ivy-minibuffer-map
	     ("M-y" . ivy-next-line-and-call)))
#+END_SRC

Swiper, an Ivy-enhanced alternative to isearch.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+END_SRC

** Silver Searcher (ag)

#+BEGIN_SRC emacs-lisp
  (use-package ag)
#+END_SRC

** Dumb Jump

[[https://github.com/jacktasia/dumb-jump][Dump Jump]] allows you to jump to definition similar to Etags but without the
extra config and need for tag files.

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
	   ("M-g p" . dump-jump-back)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config
    (setq dumb-jump-default-project "~/code")
    (setq dumb-jump-selector 'ivy))
#+END_SRC

** Avy

Quick navigation by jumping to things with [[https://github.com/abo-abo/avy][Avy]].

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind (("M-g c" . avy-goto-char)
           ("M-g w" . avy-goto-word-1)
           ("M-g l" . avy-goto-line))
    :config
    (avy-setup-default))
#+END_SRC

** Ace-link

Quickly follow links with [[https://github.com/abo-abo/ace-link][Ace-link]].

#+BEGIN_SRC emacs-lisp
  (use-package ace-link
    :config
    (ace-link-setup-default)
    (define-key org-mode-map (kbd "M-o") 'ace-link-org))
#+END_SRC

** Ace-window

Quickly switch between windows with [[https://github.com/abo-abo/ace-window][Ace-window]].

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("C-x o" . ace-window)
    :init
    (custom-set-faces
     '(aw-leading-char-face ((t (:foreground "red" :height 3.0)))))
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

** Projectile

Use [[https://github.com/bbatsov/projectile][Projectile]] which makes working within a project a lot nicer.  For example
you can use search (with Ivy) for files just within the project.  A project
is defined by a .git (others supported) in the top level dir.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-global-mode)
    (setq projectile-enable-caching t)
    (setq projectile-completion-system 'ivy))
#+END_SRC

** Paradox


[[https://github.com/Malabarba/paradox][Paradox]] is an enhanced package list/utility.

#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :commands (paradox-upgrade-packages paradox-list-packages)
    :config (setq paradox-execute-asynchronously t))
#+END_SRC

** Magit

[[https://magit.vc/][Magit]] the one and only Git frontend.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-c g" . magit-status)
    :config
    (setq magit-completing-read-function 'ivy-completing-read))
#+END_SRC

** Spaceline

[[https://github.com/TheBB/spaceline][Spaceline]] is a fancy Powerline-like modeline extracted from Spacemacs.

#+BEGIN_SRC emacs-lisp
  (use-package spaceline-config
    :ensure spaceline
    :init
    (setq powerline-default-separator 'wave
          powerline-height (truncate (* 1.2 (frame-char-height)))
          spaceline-highlight-face-func 'spaceline-highlight-face-evil-state
          spaceline-minor-modes-separator " ")
    :config
    (spaceline-spacemacs-theme))
#+END_SRC

** Dired



Dired is the directory listing, use [[https://www.emacswiki.org/emacs/DiredPlus][Dired Plus]] and [[https://www.emacswiki.org/emacs/DiredSort][DiredSort]] to further
enhance the listing.

#+BEGIN_SRC emacs-lisp
  ;; Prefer g-prefixed coreutils version of standard utilities when available
  (let ((gls (executable-find "gls")))
    (when gls (setq insert-directory-program gls)))

  (use-package dired+
    :init
    (setq-default diredp-hide-details-initially-flag nil
                  dired-dwim-target t))
  (use-package dired-sort)
#+END_SRC
 
** Whitespace

[[https://www.emacswiki.org/emacs/WhiteSpace][WhiteSpace]], a mode to toggle visibility of whitespace.

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :defer t
    :bind ("C-c w" . whitespace-mode))
#+END_SRC

Automatically cleanup unnecessary whitespace with [[https://github.com/purcell/whitespace-cleanup-mode][whitespace-cleanup-mode]]. 

#+BEGIN_SRC emacs-lisp
  (use-package whitespace-cleanup-mode
    :init
    (global-whitespace-cleanup-mode t)) ; Enabled globally
#+END_SRC

** Undo-tree

[[https://www.emacswiki.org/emacs/UndoTree][UndoTree]] lets you visualise undo.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init (global-undo-tree-mode)
    :diminish undo-tree-mode)
#+END_SRC

** Company

Auto-completion [[https://company-mode.github.io/][Company]].

#+BEGIN_SRC emacs-lisp
  (use-package company
    :init (global-company-mode)
    :config
    (setq company-tooltip-align-annotations t
          company-tooltip-flip-when-above t
          ;; Easy navigation to candidates with M-<n>
          company-show-numbers t)
    :diminish company-mode)
#+END_SRC

[[https://github.com/company-mode/company-statistics][Company-statistics]] sorts completion candidates by previous completion choices.

#+BEGIN_SRC emacs-lisp
  (use-package company-statistics
    :after company
    :config (company-statistics-mode))
#+END_SRC

** Rainbow delimiters



Highlight parens etc. by depth with [[https://www.emacswiki.org/emacs/RainbowDelimiters][Rainbow Delimiters]].

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init
    (dolist (hook '(text-mode-hook prog-mode-hook))
      (add-hook hook #'rainbow-delimiters-mode)))
#+END_SRC

** Flycheck

[[http://www.flycheck.org/en/latest/][Flycheck]] is a modern on-the-fly syntax checking tool that supports many
backend/languages.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :bind ("C-c f" . flycheck-mode))
#+END_SRC

** Flyspell

Check my spelling on the fly with [[https://www.emacswiki.org/emacs/FlySpell][FlySpell]]. Requires `aspell` to be installed.
This also spellchecks spelling in programming mode but only within comments.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :config
    (setq ispell-program-name "aspell" ; use aspell instead of ispell
          ispell-extra-args '("--sug-mode=ultra" "--lang=en_GB"))
    (add-hook 'text-mode-hook #'flyspell-mode)
    (add-hook 'prog-mode-hook #'flyspell-prog-mode)
    :bind ("<f8>" . ispell-word)
    :diminish (flyspell-mode . "Spell"))
#+END_SRC

** Smartparens

Deal with pairs of things with [[https://github.com/Fuco1/smartparens][Smartparens]].

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :commands (smartparens-mode
               smartparens-strict-mode)
    :init
    (add-hook 'slime-repl-mode-hook #'smartparens-mode)
    (add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
    (add-hook 'lisp-mode-hook #'smartparens-mode)
    (add-hook 'clojure-mode-hook #'smartparens-mode)
    :config
    (require 'smartparens-config))
#+END_SRC

** ElDoc

#+BEGIN_SRC emacs-lisp
  (use-package eldoc)
#+END_SRC

** Iedit

Edit multiple regions in the same way simultaneously with [[https://github.com/victorhge/iedit][Iedit]].

#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :commands (iedit-mode iedit-rectangle-mode)
    :bind ("C-;" . iedit-mode))
#+END_SRC

* Major Modes / Language Specific Stuff
** Org

[[http://orgmode.org/][Org mode]] - Your life in plain text.

#+BEGIN_SRC emacs-lisp
  ;; Define global key binding outside of use-package otherwise it doesn't
  ;; seem to work when you first start Emacs.
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cb" 'org-iswitchb)

  (use-package org
    :mode ("\\.org$'" . org-mode)
    :commands (org-mode org-capture)
    :pin org
    :config
    (setq org-src-fontify-natively t) ; Syntax highlight code blocks.
    (setq org-directory "~/org")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    (setq org-agenda-files (list "~/org/personal.org"
				 "~/org/work.org"))
    (setq org-log-done 'time)
    (setq org-log-done-with-time t)
    (setq org-log-into-drawer t)
    (setq org-completion-use-ido t)

    ;; Follow links with RET.
    (setq org-return-follows-link t)

    (setq org-todo-keywords
	 '((sequence "TODO(t)" "WAIT(w@/!)" "APPT(a)" "|" "DONE(d!)" "CANCELLED(c@)" "DELEGATED(l@)")))

    ;; Capture templates
    (setq org-capture-templates
          `(("p" "Personal Todo" entry (file+headline ,(concat org-directory "/personal.org") "Inbox") "* TODO %?\n  %i\n")
            ("w" "Work Todo" entry (file+headline ,(concat org-directory "/work.org") "Inbox") "* TODO %?\n  %i\n")
            ("s" "Someday Todo" entry (file+headline ,(concat org-directory "/someday.org") "Inbox") "* TODO %?\n  %i\n")
            ("n" "Notes" entry (file+headline ,(concat org-directory "/notes.org") "Notes") "* %^{NOTES} \n%<%Y-%m-%d %H:%M>\n %?\n %i\n")
            ("j" "Journal" entry (file+datetree ,(concat org-directory "/journal.org")) "* %?\nEntered on %U\n  %i\n")
            ("l" "Link" entry (file+headline ,(concat org-directory "/links.org") "Links") "* %? %^L %^g \n%T" :prepend t)
            )))

  (setq org-agenda-custom-commands
  '(("A" "Work and Personal Lists"
       ((agenda)
            (tags-todo "URGENT")
            (tags-todo "EMAIL")
            (tags-todo "PHONE")
            (tags-todo "HOME")
            (tags-todo "COMPUTER")
	    (tags-todo "-{.*}")))

    ("D" "Daily Action List"
       ((agenda "" ((org-agenda-span 1)
			(org-agenda-sorting-strategy
			 (quote ((agenda time-up priority-down tag-up) )))
			(org-deadline-warning-days 0)
			))))
  ))

  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "/DONE" 'tree))
#+END_SRC

We'll need the htmlize package for syntax highlighting of code blocks.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :commands (htmlize-buffer
               htmlize-file
               htmlize-many-files
               htmlize-many-files-dired
               htmlize-region))
#+END_SRC

Exporting to web pages that can use tufte.css

#+BEGIN_SRC emacs-lisp
  (use-package ox-tufte
    :init (require 'ox-tufte))
#+END_SRC

[[http://orgmode.org/w/?p=org-mode.git;a=blob_plain;f=contrib/lisp/ox-rss.el;hb=HEAD][ox-rss.el]] for RSS 2.0 exports.

#+BEGIN_SRC emacs-lisp
  (use-package ox-rss
    :ensure nil
    :load-path "~/.emacs.d/lisp/")
#+END_SRC

** Markdown

[[http://jblevins.org/projects/markdown-mode/][Markdown Mode]] is a major mode for Markdown offering syntax highlighting
and preview as well as other niceties.

Markdown command is set to [[http://fletcherpenney.net/multimarkdown/][multimarkdown]] so that needs installed on the system.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

** YAML

[[https://www.emacswiki.org/emacs/YamlMode][Yaml mode]]

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode (("\\.yml$" . yaml-mode)
           ("\\.yaml$" . yaml-mode)
           ("\\.sls$" . yaml-mode))) ; SaltStack
#+END_SRC

** Python

Setup Python mode

#+BEGIN_SRC emacs-lisp
  (use-package python
    :init
    (add-hook 'python-mode-hook #'flycheck-mode)
    :config
    (setq fill-column 79)
    (setq-default flycheck-flake8rc "~/.config/flake8rc")
    (setq python-check-command "flake8")
    (setq tab-width 4)

    (pyvenv-mode 1))
#+END_SRC

Work with virtual envs using [[https://github.com/proofit404/pyenv-mode][Pyenv mode]].

#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :commands (pyvenv-activate))
#+END_SRC

[[https://github.com/proofit404/anaconda-mode][Anaconde mode]] offers code navigation, documentation lookup, and completion
for Python.

#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :init
    (progn
      (add-hook 'python-mode-hook 'anaconda-mode)
      (add-hook 'python-mode-hook 'anaconda-eldoc-mode)))
#+END_SRC

[[https://github.com/proofit404/company-anaconda][company-anaconda]] is an Anaconda backend for Company.

#+BEGIN_SRC emacs-lisp
  (use-package company-anaconda
    :init (add-to-list 'company-backends 'company-anaconda))
#+END_SRC

** Jinja2

[[https://melpa.org/#/jinja2-mode][Jinja2 Mode]] is a majore mode for the jinja2 templating language.

#+BEGIN_SRC emacs-lisp
  (use-package jinja2-mode
    :mode ("\\.j2\\'" . jinja2-mode))
#+END_SRC

** Go

[[https://github.com/dominikh/go-mode.el][Go mode]]

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :init
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save)
    (add-hook 'go-mode-hook #'flycheck-mode)
    (add-hook 'go-mode-hook (lambda () (setq flycheck-disabled-checkers '(go-errcheck))))
    (add-hook 'go-mode-hook (lambda ()
                              (if (not (string-match "go" compile-command))
                                  (set (make-local-variable 'compile-command)
                                       "go build -v")))))
#+END_SRC

[[https://github.com/nsf/gocode/tree/master/emacs-company][gocode]] backend for Go auto-completion via Company.  This sets gocode to be the only
Company backend when editing Go code.

`gocode` itself can be installed with: `go get -u github.com/nsf/gocode`

#+BEGIN_SRC emacs-lisp
  (use-package company-go
    :init
    (add-hook 'go-mode-hook (lambda ()
                            (set (make-local-variable 'company-backends) '(company-go))
                            (company-mode))))
#+END_SRC

Show ElDoc style documention for Go via [[https://github.com/syohex/emacs-go-eldoc][go-eldoc]].

#+BEGIN_SRC emacs-lisp
  (use-package go-eldoc
    :init
    (add-hook 'go-mode-hook 'go-eldoc-setup))
#+END_SRC
** Lisp / Clojure

[[https://common-lisp.net/project/slime/][SLIME]]: The Superior Lisp Interaction Mode for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :config
    (setq inferior-lisp-program "clisp")
    (slime-setup '(slime-fancy))

    (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
    (add-hook 'ielm-mode-hook #'eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook #'eldoc-mode)

    (add-hook 'lisp-mode-hook #'slime-lisp-mode-hook))
#+END_SRC

[[https://github.com/clojure-emacs/clojure-mode][Clojure Mode]] is a major mode for Clojure.

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :config
    (add-hook 'clojure-mode-hook #'subword-mode))
#+END_SRC

[[https://cider.readthedocs.io/en/latest/][CIDER]] is the Clojure(Script) Interactive Development Environment that Rocks!

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :config
    (add-hook 'cider-mode-hook #'eldoc-mode)
    (add-hook 'cider-repl-mode-hook #'eldoc-mode))
#+END_SRC

[[https://github.com/Malabarba/speed-of-thought-lisp][Speed of Thought Lisp]] and [[https://github.com/Malabarba/speed-of-thought-clojure][Speed of Thought Clojure]] increase the speed at
which you can write Lisp/Clojure by including many abbreviations that
activated when typing them directly after parentheses.

#+BEGIN_SRC emacs-lisp
  (use-package sotlisp
    :commands sotlisp-mode
    :config
    (sotlisp-define-all-abbrevs))

  (use-package sotclojure
    :commands sotclojure-mode
    :config
    (sotclojure-define-all-abbrevs))
#+END_SRC
** Terraform

[[https://github.com/syohex/emacs-terraform-mode][Terraform Mode]] is a major mode for editing Terraform files.

#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :config
    (setq terraform-indent-level 2))
#+END_SRC
* Extras
** mu4e

Use [[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] to read email with Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e"
    :commands (mu4e mu4e-compose-new)
    :config
    (setq mu4e-maildir (expand-file-name "~/.mail")
	  mu4e-get-mail-command "true"
	  mu4e-change-filenames-when-moving t))
#+END_SRC
** Buffer switching

 Easily switch to previous buffer.

 #+BEGIN_SRC emacs-lisp
   (defun my/switch-to-previous-buffer ()
     "Switch to previously open buffer.
   Repeated invocations toggle between the two most recently open buffers."
     (interactive)
     (switch-to-buffer (other-buffer (current-buffer) 1)))
 #+END_SRC

** Key Chords

Use [[https://www.emacswiki.org/emacs/key-chord.el][key-chord]] Map pairs of keys to call commands to create easy shortcuts.

#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :init
    (progn
      (key-chord-mode 1)
      (key-chord-define-global "jk"     'my/switch-to-previous-buffer)))
#+END_SRC
