#+STARTUP: content

* General
** System settings

#+BEGIN_SRC emacs-lisp
;; i18n
(prefer-coding-system 'utf-8)

;; Reduce the frequency of garbage collection by making it happen on
;; each 50MB of allocated data (the default is on every 0.76MB)
(setq gc-cons-threshold 50000000)

;; Warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)
#+END_SRC

Auto-saving does not cooperate with org-crypt.el: so you need
to turn it off if you plan to use org-crypt.el quite often.
Otherwise, you'll get an (annoying) message each time you
start Org.

#+begin_src emacs-lisp
  (setq auto-save-default nil)
#+end_src

Emacs might need access to executables that are stored in some custom
locations, for example a Rust tool installed via ~cargo~ or a Python
tool installed via ~pip install --user~.  ~exec-path~ is essentially
the Emacs equivalent of your system's ~$PATH~ and [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]
lets you set the Emacs ~exec-path~ using the same settings as the
shell env.  I also grab the ~ssh-agent~ env vars so that I don't have
to keep entering SSH key passphrases for actions such as pushing Git
changes up to the remote via Magit.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "SSH_AGENT_PID")
    (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
    (exec-path-from-shell-copy-env "DICPATH"))
#+end_src

Set some defaults

#+BEGIN_SRC emacs-lisp
  (setq-default
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   display-time-default-load-average nil            ; Don't display load average
   help-window-select t                             ; Focus new help windows when opened
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   kill-ring-max 128                                ; Maximum length of kill ring
   load-prefer-newer t                              ; Prefers the newest version of a file
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t                                 ; Always open read-only buffers in view-mode
   calendar-week-start-day 1                        ; Start calendar on Monday not Sunday
   create-lockfiles nil                             ; No lockfiles, don't need them and they mess with Terraform
  )                       


  (cd "~/")                                         ; Start in $HOME
#+END_SRC

Use GNU ~ls~ from the ~coreutils~ package when on macOS.

#+begin_src emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
          insert-directory-program "gls"
          dired-listing-switches "-aBhl --group-directories-first"))
#+end_src

Don't bombard me with elisp compilation warnings when initialising new
or updated packages.

#+begin_src emacs-lisp
  (setq warning-minimum-level :error)
#+end_src

Completion settings, see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion-Styles.html][Emacs Docs - Completion Options]] for details.

#+begin_src emacs-lisp
  (setq completion-styles '(substring orderless basic))
  (setq completion-ignore-case t)
#+end_src

** Personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Ross Timson"
      user-mail-address "me@rosstimson.com")
#+END_SRC

** Backups

Put backups in a sensible location rather than scattered all over the place.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk is cheap. Save lots.

#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t)    ; Don't delink hardlings
(setq version-control t)      ; Use version numbers on backups
(setq delete-old-versions t)  ; Automatically delete excess backups
(setq kept-new-versions 20)   ; How many of the newest versions to keep
(setq kept-old-versions 5)    ; How many of the oldest version to keep
#+END_SRC

** Interface

Remove a bunch of cruft from the interface.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inihibt-startup-echo-area-message "rosstimson")
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

Set some further UI options.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (blink-cursor-mode -1)
  (global-hl-line-mode t)
  (line-number-mode t)
  (column-number-mode t)
  (setq-default indicate-empty-lines t)
  ;; Setting cursor colour and no scrollbars for all inc. emacsclient,
  ;; without these set standard emacs has was I want but when using
  ;; emacsclient the cursor colour is almost white and the scrollbars
  ;; show.
  (setq default-frame-alist '((cursor-color . "#444")
                              (vertical-scroll-bars . nil)
                              (horizontal-scroll-bars . nil)))
#+END_SRC

Stop the annoying bloody beeping.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

Stop resizing the frame all the time and just start emacs maximised.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC

Short form yes/no questions.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p #'y-or-n-p)
#+END_SRC

Smooth scrolling.

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 5
      scroll-conservatively 9999
      scroll-step 1)
#+END_SRC

Add my custom colour theme.

#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  ;; Currently using modus themes as my default so I can toggle between
  ;; light and dark depending on time of day so don't load my theme by
  ;; default.
  ;;(load-theme 'rosstimson-muted t)
#+end_src

Get other nice themes.

#+BEGIN_SRC emacs-lisp
  (use-package base16-theme)
  (use-package ef-themes)
#+END_SRC

Configure my main theme.

[[https://protesilaos.com/emacs/modus-themes][Modus Themes]] -- Modus Operandi (Light) and Modus Vivendi (Dark)
Accessible themes for GNU Emacs, conforming with the highest standard
for colour contrast between background and foreground values (WCAG
AAA)

#+begin_src emacs-lisp
  (use-package modus-themes
    :demand t
    :bind ("<f5>" . modus-themes-toggle)
    :config
    ;; Customizations should be done prior to loading the themes.
    (setq modus-themes-italic-constructs t
      modus-themes-bold-constructs nil
      modus-themes-region '(accented))

    ;; Settings for the modeline.
    (setq modus-themes-mode-line '(accented borderless padded))

    ;; Rich colours for completion matches.
    (setq modus-themes-completions 'opinionated)

    ;; Make Org mode headings nicer.
    (setq modus-themes-headings
      '((0 . (variable-pitch (height 2.2)))
        (1 . (variable-pitch monochrome (height 2.0)))
        (2 . (variable-pitch monochrome (height 1.7)))
        (3 . (variable-pitch monochrome (height 1.5)))
        (4 . (variable-pitch monochrome (height 1.2)))
        (5 . (variable-pitch monochrome (height 1.0)))
        (t . (variable-pitch monochrome))))

    ;; Important!
    (setq modus-themes-scale-headings t)

    ;; Load the theme of your choice.
    (load-theme 'modus-operandi :no-confirm))
#+end_src

Set a light or dark theme depending on the systems current appearance
which I have set to 'auto' on my Macs meaning they will switch to dark
mode at nighttime.

#+begin_src emacs-lisp
  (defun rt/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (load-theme 'modus-operandi t))
      ('dark (load-theme 'modus-vivendi t))))

  (add-hook 'ns-system-appearance-change-functions #'rt/apply-theme)
#+end_src

Allow easy movement between windows/splits.

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
#+END_SRC

** Recent files

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :elpaca nil
  :config
  (setq recentf-max-saved-items 50
        recentf-auto-cleanup 100
        recentf-exclude (list "/\\.git/.*\\'" ; Git contents
                              "/elpa/.*\\'"   ; Package files
                              ".*\\.gz\\'"
                              "TAGS"
                              ".*-autoloads\\.el\\'"
                              "/tmp"
                              "/ssh:"
                              "company-statistics-cache\.el"
                              "custom\.el"))
  (recentf-mode t))
#+END_SRC

** iBuffer

Use [[https://www.emacswiki.org/emacs/IbufferMode][ibuffer]] which is a better menu/switcher for buffers.  Most of this
config has been taken from [[http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html][Tips for using Emacs Ibuffer]].

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :elpaca nil
  :bind ("C-x C-b" . ibuffer)
  :config
  ;; Don't prompt to delete unmodified buffers.
  (setq ibuffer-expert t)

  ;; Organise ibuffer into groups of related stuff.
  (setq ibuffer-saved-filter-groups
    '(("default"
      ("Dired" (mode . dired-mode))
      ("Org" (or (mode . org-mode)
        (mode . org-agenda-mode)))
      ("Programming" (or (mode . python-mode)
                         (mode . go-mode)
                         (mode . rust-mode)
                         (mode . clojure-mode)))
      ("Web" (mode . web-mode))
      ("Shell" (or (mode . eshell-mode)
        (mode . shell-mode)
        (mode . term-mode)))
      ("Magit" (name . "\*magit\*"))
      ("Mu4e" (name . "\*mu4e\*"))
      ("Emacs" (or (name . "^\\*scratch\\*$")
        (name . "^\\*Messages\\*$")
        (name . "^\\*Warnings\\*$")
        (name . "\*Help\*")
        (name . "\*Apropos\*")
        (name . "\*info\*")
        (name . "^\\*anaconda-mode\\*$")
        (mode . ag-mode)))
  )))

  ;; ibuffer-auto-mode is a minor mode that automatically keeps the
  ;; buffer list up to date.
  (add-hook 'ibuffer-mode-hook
            #'(lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Don't show empty filter groups.
  (setq ibuffer-show-empty-filter-groups nil))
#+END_SRC

** Eshell

#+BEGIN_SRC emacs-lisp
(use-package eshell
  :elpaca nil
  :commands eshell
  :init
  (setq eshell-aliases-file (concat user-emacs-directory "eshell.aliases")
        eshell-cmpl-ignore-case t
        eshell-history-size 1024)

  ;; Visual commands
  (setq eshell-visual-commands '("vi" "vim" "top" "htop" "less" "more" "tmux"))
  (setq eshell-visual-subcommands '(("git" "log" "diff" "show"))))
#+END_SRC

Make C-l clear eshell screen just as it would a normal shell.

#+BEGIN_SRC emacs-lisp
(defun eshell-clear-buffer ()
  "Clear terminal"
  (interactive)
  (let ((inhibit-read-only t))
        (erase-buffer)
        (eshell-send-input)))

(add-hook 'eshell-mode-hook
#'(lambda()
  (local-set-key (kbd "C-l") 'eshell-clear-buffer)))
#+END_SRC

** Hippie-expand

[[https://www.emacswiki.org/emacs/HippieExpand][HippieExpand]] looks at the word before point and tries to expand it in various ways.

#+BEGIN_SRC emacs-lisp
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+END_SRC

** Global Key Bindings

I often split the window and nearly always want to switch to the new
window in order to open a new file.  This will switch automatically so
I don't have the extra step.

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
(global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
#+END_SRC

Keyboard shortcut for quickly compiling code.

#+begin_src emacs-lisp
  (global-set-key [?\C-x ?c] 'compile)
#+end_src

** Tabs vs Spaces

Default to spaces for indentation.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

* Minor Modes
** Ace-link

Quickly follow links with [[https://github.com/abo-abo/ace-link][Ace-link]].

#+BEGIN_SRC emacs-lisp
(use-package ace-link
  :config
  (ace-link-setup-default)
  (define-key org-mode-map (kbd "M-o") 'ace-link-org))
#+END_SRC

** All The Icons

[[https://github.com/domtronn/all-the-icons.el][All the Icons]] is a utility package to collect various Icon Fonts and
propertize them within Emacs.  It is used for different filetype icons
in Dirvish etc.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

** Avy

Quick navigation by jumping to things with [[https://github.com/abo-abo/avy][Avy]].

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind (("M-g c" . avy-goto-char)
         ("M-g w" . avy-goto-word-1)
         ("M-g l" . avy-goto-line))
  :config
  (avy-setup-default))
#+END_SRC

** Beacon

[[https://github.com/Malabarba/beacon][Beacon]] - A light that follows your cursor around so you don't lose it.

#+begin_src emacs-lisp
  (use-package beacon
    :custom
    (beacon-size 60)
    :config
    (beacon-mode 1))
#+end_src

** Blackout

[[https://github.com/radian-software/blackout][Blackout]] is a package which allows you to hide or customize the
display of major and minor modes in the mode line.

#+begin_src emacs-lisp
  (use-package blackout :demand t)
  (elpaca-wait)
#+end_src

** Company

Auto-completion via [[https://company-mode.github.io/][Company]].

#+BEGIN_SRC emacs-lisp
  (use-package company
    :init (global-company-mode)
    :blackout
    :config
    (setq company-tooltip-align-annotations t
          company-tooltip-flip-when-above t
          ;; Easy navigation to candidates with M-<n>
          company-show-numbers t))
#+END_SRC

[[https://github.com/rafalcieslak/emacs-company-terraform][Company-terraform]] is a Company backend for Terraform files.

#+BEGIN_SRC emacs-lisp
(use-package company-terraform
  :after company
  :config (company-terraform-init))
#+END_SRC

** Consult

[[https://github.com/minad/consult][Consult]] provides various handy commands based on the Emacs completion
function completing-read.  It provides a bunch of helper functions
similar to those found in Counsel and also includes a Swiper-like
function with ~consult-line~.

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Load immediately so I can use recent file search or search stuff on startup.
    :demand t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (("C-x f" . consult-recent-file)
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-project-imenu)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s L" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch


    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Use `fd' for `consult-find', with the following arguments.
    ;; Ignore case, include hidden, show absolute path, and never colour.
    (setq consult-find-command "fd -i -H -a -c never OPTS ARG"))

  ;; Optionally add the `consult-flycheck' command.
  (use-package consult-flycheck
    :bind (:map flycheck-command-map
                ("!" . consult-flycheck)))
#+end_src

** Crux

[[https://github.com/bbatsov/crux][Crux]] -- A Collection of Ridiculously Useful eXtensions for Emacs.

#+begin_src emacs-lisp
  (use-package crux
    :bind
    ("C-k" . crux-smart-kill-line)
    ("C-x n" . crux-cleanup-buffer-or-region)
    ("C-S-RET" . crux-smart-open-line-above)
    ("S-RET" . crux-smart-open-line)
    ("<C-backspace>" . crux-kill-line-backwards)
    ("C-x C-u" . crux-upcase-region)
    ("C-x C-l" . crux-downcase-region))
#+end_src

** Cut/Copy/Comment current line if no region selected

In many editors cut and copy act on the current line if no text is
visually selected, [[https://github.com/purcell/whole-line-or-region/blob/master/whole-line-or-region.el][whole-line-or-region]] does just that for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package whole-line-or-region
   :blackout whole-line-or-region-local-mode
   :config
   (whole-line-or-region-global-mode t))
#+END_SRC

** Denote

[[https://protesilaos.com/emacs/denote][Denote]] is a simple note-taking tool. It is based on the idea that
notes should follow a predictable and descriptive file-naming
scheme. The file name must offer a clear indication of what the note
is about, without reference to any other metadata. Denote basically
streamlines the creation of such files while providing facilities to
link between them.

#+begin_src emacs-lisp
  (use-package denote
    :hook (dired-mode . denote-dired-mode-in-directories)
    :bind
    ("C-c n n" . denote)
    ("C-c n N" . denote-type)
    ("C-c n d" . denote-date)
    ("C-c n s" . denote-subdirectory)
    ("C-c n t" . denote-template)
    ("C-c n i" . denote-link)
    ("C-c n I" . denote-link-add-links)
    ("C-c n l" . denote-link-find-file)
    ("C-c n b" . denote-link-backlinks)
    ("C-c n r" . denote-rename-file)
    ("C-c n R" . denote-rename-file-using-front-matter)
    :config
    (setq denote-directory (expand-file-name "~/Documents/notes/"))
    (setq denote-known-keywords '("emacs" "java" "journal" "k8s" "metanote" "sre"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    (setq denote-file-type nil) ; Org is the default, set others here
    (setq denote-prompts '(title keywords)))
#+end_src

** Dired

Dired is the directory listing / file manager.  When on BSD it will
complain: 'ls does not support --dired', rather than installing GNU
Coreutils just for this just work around it with very minor
limitations.

#+BEGIN_SRC emacs-lisp
  (when (string= system-type "berkeley-unix")
    (setq dired-use-ls-dired nil))
#+END_SRC

Use human readable file sizes.

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches
        "-l --all --human-readable --group-directories-first")
#+END_SRC

Allow visiting of files via 'a' key which won't create multiple Dired
buffers for each dir visited, this is disabled by default and a
warning message will appear.

#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** Dirvish

[[https://github.com/alexluigit/dirvish][Dirvish]] is a modern replacement for Dired.

#+begin_src emacs-lisp
  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :custom
    (dirvish-quick-access-entries
     '(("h" "~/"              "Home")
       ("c" "~/code/"         "Code")
       ("." "~/.dotfiles/"    "Dotfiles")
       ("d" "~/Downloads/"    "Downloads")
       ("w" "~/code/work/"    "Work")
       ))
    :config
    (setq delete-by-moving-to-trash t)
    (setq dirvish-attributes
          '(all-the-icons file-time file-size collapse subtree-state))
    :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
    (("C-c f" . dirvish-fd)
     :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
     ("a"   . dirvish-quick-access)
     ("f"   . dirvish-file-info-menu)
     ("y"   . dirvish-yank-menu)
     ("N"   . dirvish-narrow)
     ("^"   . dirvish-history-last)
     ("h"   . dirvish-history-jump) ; remapped `describe-mode'
     ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
     ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
     ("TAB" . dirvish-subtree-toggle)
     ("M-f" . dirvish-history-go-forward)
     ("M-b" . dirvish-history-go-backward)
     ("M-l" . dirvish-ls-switches-menu)
     ("M-m" . dirvish-mark-menu)
     ("M-t" . dirvish-layout-toggle)
     ("M-s" . dirvish-setup-menu)
     ("M-e" . dirvish-emerge-menu)
     ("M-j" . dirvish-fd-jump)))
#+end_src

** Dumb Jump

[[https://github.com/jacktasia/dumb-jump][Dump Jump]] allows you to jump to definition similar to Etags but without the
extra config and need for tag files.

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :config
    (setq dumb-jump-default-project "~/code"
          dumb-jump-selector 'completing-read
          dumb-jump-prefer-searcher 'rg)
    :hook (xref-backend-functions . dumb-jump-xref-activate))
#+END_SRC

** ElDoc

#+BEGIN_SRC emacs-lisp
(use-package eldoc)
#+END_SRC

** Embark

[[https://github.com/oantolin/embark/][Embark]] is minibuffer actions rooted in keymaps which provides a sort
of right-click contextual menu for Emacs, accessed through the
embark-act command (which you should bind to a convenient key),
offering you relevant actions to use on a target determined by the
context:

#+begin_src emacs-lisp
  (use-package embark
    :bind
    ("C-S-a" . embark-act))

  ;; Consult integration.
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . embark-consult-preview-minor-mode))
#+end_src

** Emmet

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :bind ("C-<return>" . emmet-expand-line)
  :config
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'html-mode-hook 'emmet-mode))
#+END_SRC

** Iedit

Edit multiple regions in the same way simultaneously with [[https://github.com/victorhge/iedit][Iedit]].

#+BEGIN_SRC emacs-lisp
(use-package iedit
  :commands (iedit-mode iedit-rectangle-mode)
  :bind ("C-;" . iedit-mode))
#+END_SRC

** Language Server Protocol (LSP)

[[https://github.com/emacs-lsp/lsp-mode][LSP Mode]] -- Emacs client/library for the Language Server Protocol 

#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook ((clojure-mode . lsp)
           (go-mode . lsp)
           (java-mode . lsp-deferred)
           (js2-mode . lsp)
           (python-mode . lsp)
           (ruby-mode . lsp)
           (rust-mode . lsp)
           (terraform-mode . lsp))
    :commands lsp
    :config
    (setq lsp-rust-server 'rust-analyzer)
    (setq lsp-terraform-server '("terraform-ls" "serve"))
    (setq lsp-restart 'auto-restart)

    (require 'dap-java))
#+end_src

[[https://github.com/emacs-lsp/lsp-ui][lsp-ui]] -- Add some extra UI enhancements to LSP Mode.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :after lsp-mode)
#+end_src

LSP needs some manual installation stuff for Java, that's what this
next package is doing.  Also, you need to install the lang server, on
MacOS that would be ~brew install jdtls~.

#+begin_src emacs-lisp
  (use-package lsp-java
    :config (add-hook 'java-mode-hook 'lsp))
#+end_src

** Debug Adapter Protocol (DAP)

[[https://emacs-lsp.github.io/dap-mode][DAP Mode]] - Emacs client/library for Debug Adapter Protocol is a wire
protocol for communication between client and Debug Server. It's
similar to the LSP but provides integration with debug server.

#+begin_src emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-auto-configure-mode)
    (add-hook 'dap-stopped-hook
              (lambda (arg) (call-interactively #'dap-hydra))))
#+end_src

** Magit

[[https://magit.vc/][Magit]] the one and only Git frontend.

#+begin_src emacs-lisp
  (use-package magit
    ;; Don't lazy load, force loading to occur immediately and not
    ;; establish an autoload for the bound key.  I do this so that Magit
    ;; is around whent git committing from terminal via emacsclient,
    ;; without it magit does not get loaded and you edit the commit
    ;; message without magit's extras.
    :demand t
    :bind ("C-c g" . magit-status))
#+end_src

[[https://magit.vc/manual/forge.html][Forge]] allows you to work with Git forges, such as Github and Gitlab,
from the comfort of Magit and the rest of Emacs.

#+begin_src emacs-lisp
  (use-package forge
    :after magit
    :custom
    (forge-topic-list-limit '(60 . 0) "Maximum of 60 open topics and 0 closed topics."))
#+end_src

** Vertico

[[https://github.com/minad/vertico][Vertico]] provides a performant and minimalistic vertical completion UI
based on the default completion system. The main focus of Vertico is
to provide a UI which behaves correctly under all circumstances. By
reusing the built-in facilities system, Vertico achieves full
compatibility with built-in Emacs completion commands and completion
tables.

Note the keybinding being set here to ignore completion suggestions
and just do.  Example of this issue is when trying to create a
directory with dired called java but there is already a javascript
directory, hitting return just uses the completion suggestion so you'd
get an error about how you cannot create the directory as it already
exists.  You can encounter this type of scenario frequently in other
situations too. This Github issue has more details:
[[https://github.com/minad/vertico/issues/211][https://github.com/minad/vertico/issues/211]]. The key binding should be
there by default according to the Github issue but it doesn't seem to
be set for me so I explicitly set it here.  The alternative to using
this binding for ~vertico-exit-input~ would be to use C-p to put the
line back up into the minibuffer text entry line rather than the
completion suggestion.

#+begin_src emacs-lisp
  (use-package vertico
    :bind ("M-<return>" . vertico-exit-input)
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )
#+end_src

Persist history over Emacs restarts. Vertico sorts by history position.

#+begin_src emacs-lisp
  (use-package savehist
    :elpaca nil
    :init
    (savehist-mode))
#+end_src

** Orderless

[[https://github.com/oantolin/orderless][Orderless]] completion style that divides the pattern into
space-separated components, and matches candidates that match all of
the components in any order. Each component can match in any one of
several ways: literally, as a regexp, as an initialism, in the flex
style, or as multiple word prefixes. By default, regexp and literal
matches are enabled.

#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia

Enable richer annotations using the [[https://github.com/minad/marginalia/][Marginalia]] package, this shows
short explanations next to items in the minibuffer.

#+begin_src emacs-lisp
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode)

    ;; Prefer richer, more heavy, annotations over the lighter default variant.
    ;; E.g. M-x will show the documentation string additional to the keybinding.
    ;; By default only the keybinding is shown as annotation.
    ;; Note that there is the command `marginalia-cycle' to
    ;; switch between the annotators.
    ;; (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  )
#+end_src

** Rainbow delimiters

Highlight parens etc. by depth with [[https://www.emacswiki.org/emacs/RainbowDelimiters][Rainbow Delimiters]].

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Ripgrep

[[https://github.com/dajva/rg.el][rg.el]] - Use ripgrep in Emacs.

Ripgrep is my search tool of choice and has essentially completely
replaced ~grep~ for me.

Ripgrep is a replacement for both grep like (search one file) and ag
like (search many files) tools. It's fast and versatile and written in
Rust.

#+begin_src emacs-lisp
  (use-package rg
    :config
    (rg-enable-default-bindings))
#+end_src

** Smart Mode Line

Prettify the mode line with [[https://github.com/Malabarba/smart-mode-line][Smart Mode Line]].

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :config
  (setq sml/no-confirm-load-theme t)
  (setq sml/theme 'respectful)
  (sml/setup)

  ;; Shorten certain paths with 'directory prefixes'.
  (add-to-list 'sml/replacer-regexp-list '("^~/code/dotfiles/" ":DOT:") t))
#+END_SRC

** Smart Tabs

Use [[https://www.emacswiki.org/emacs/SmartTabs][Smart Tabs]] for certain langs/modes.  Smart Tabs offers semantic
way of using tab characters in source code: tabs for indentation,
spaces for alignment.

#+BEGIN_SRC emacs-lisp
(use-package smart-tabs-mode
  :config
  (smart-tabs-insinuate 'c 'c++ 'java 'javascript)
)
#+END_SRC

** Smartparens

Deal with pairs of things with [[https://github.com/Fuco1/smartparens][Smartparens]].

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :commands (smartparens-mode smartparens-strict-mode)
  :config
  (require 'smartparens-config)
  (sp-use-smartparens-bindings))
#+END_SRC

** Smerge

Smerge is a handy tool that helps resolve merge conflicts, however the
default command prefix key binding is rather cumbersome so set it to
something a bit nicer.

#+begin_src emacs-lisp
  (use-package smerge-mode
    :elpaca nil
    :init
    (setq smerge-command-prefix "\C-cv"))
#+end_src

** Spelling

Set location for personal dictionary.
   
#+begin_src emacs-lisp
  (setq ispell-personal-dictionary "~/.aspell.en.pws")
#+end_src

Check my spelling on the fly with [[https://gitlab.com/ideasman42/emacs-spell-fu][spell-fu]]. Requires `aspell` to be installed.
This also spellchecks spelling in programming mode but only within comments.

#+begin_src emacs-lisp
  (use-package spell-fu
    :config (setq ispell-dictionary "en_GB")
    :hook ((text-mode . spell-fu-mode)
           (org-mode . spell-fu-mode)))
#+end_src

** Switch-window

Quickly switch between windows with [[https://github.com/dimitri/switch-window][switch-window]].

#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :bind ("C-x o" . switch-window)
  :config
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
    '("a" "r" "s" "t" "n" "e" "i" "o"))
  (setq switch-window-threshold 2))
#+END_SRC

** Undo Fu

[[https://gitlab.com/ideasman42/emacs-undo-fu][Undo Fu]] - Simple,
stable linear undo with redo for Emacs via a light weight wrapper for
Emacs built-in undo system,

#+begin_src emacs-lisp
  (use-package undo-fu
    :config
    :bind (("C-/" . undo-fu-only-undo)
           ("C-M-/" . undo-fu-only-redo)))
#+end_src

** Wgrep

[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]]

wgrep allows you to edit a grep buffer and apply those changes to the
file buffer like sed interactively. No need to learn sed script, just
learn Emacs.

rg.el also integrates with wgrep out of the box.

#+begin_src emacs-lisp
  (use-package wgrep
    :config
    (setq wgrep-auto-save-buffer t))
#+end_src

** Which-key

[[https://github.com/justbur/emacs-which-key][which-key]] is a package that displays available keybindings in popup.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode t)
  :blackout)
#+END_SRC

** Whitespace

[[https://www.emacswiki.org/emacs/WhiteSpace][WhiteSpace]], a mode to toggle visibility of whitespace.

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :elpaca nil
    :bind ("C-c w" . whitespace-mode)
    :config
    (setq whitespace-line-column 80)
    (setq whitespace-style '(face tabs spaces indentation lines-tail empty trailing)))
#+END_SRC

Automatically cleanup unnecessary whitespace with [[https://github.com/purcell/whitespace-cleanup-mode][whitespace-cleanup-mode]]. 

#+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :init
  (global-whitespace-cleanup-mode t)) ; Enabled globally
#+END_SRC

** YASnippet

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template
system for Emacs.

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1)
)
#+end_src

[[https://github.com/AndreaCrotti/yasnippet-snippets/][YASnippet-snippets]],
the official collection of snippets for many languages.

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnipet
)
#+end_src

* Major Modes / Language Specific Stuff
** Org

[[http://orgmode.org/][Org mode]] - Your life in plain text.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :elpaca nil
    :mode ("\\.org$'" . org-mode)
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c l" . org-store-link)
           ("C-c C-," . org-insert-structure-template))
    :init
    ;; Load extra Org modules from contrib
    (add-to-list 'org-modules 'org-protocol)
    (add-to-list 'org-modules 'org-crypt)
    (add-to-list 'org-modules 'org-habit)
    (add-to-list 'org-modules 'ox-beamer)

    :config
    (setq org-startup-indented t
          org-ellipsis "  " ;; folding symbol
          org-pretty-entities t
          org-hide-emphasis-markers t
          ;; show actually italicized text instead of /italicized text/
          org-agenda-block-separator ""
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t)

    ;; Syntax highlight code blocks and make tabs work as expected.
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t)

    (setq org-directory "~/Documents/org")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    (setq org-log-done 'time)
    (setq org-log-done-with-time t)
    (setq org-log-into-drawer t)
    (setq org-completion-use-ido t)

    ;; Follow links with RET.
    (setq org-return-follows-link t)

    (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)")))

    ;; Capture templates
    (setq org-capture-templates
          `(("t" "Todo" entry (file+headline ,(concat org-directory "/todo.org") "Inbox")
             "* TODO %?\n  %i\n" :empty-lines 1)
            ("s" "Someday / Maybe" entry (file+headline ,(concat org-directory "/someday-maybe.org") "Inbox")
             "* TODO %?\n  %i\n" :empty-lines 1)
            ("n" "Notes" entry (file+headline ,(concat org-directory "/notes.org") "Inbox")
             "* %^{NOTES} \n%<%Y-%m-%d %H:%M>\n %?\n %i\n" :empty-lines 1)
            ("l" "Protocol Link" entry (file+headline ,(concat org-directory "/links.org") "Inbox")
             "* [[%:link][%:description]] \n\n%i\n%?\nCaptured On: %U" :empty-lines 1)))

    ;; Refile targets
    (setq org-refile-targets
          '(("todo.org" :maxlevel . 3)
            ("someday-maybe.org" :maxlevel . 3)
            ("links.org" :maxlevel . 3)
            ("cal.org" :maxlevel . 3)))

    ;; https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
    ;; Show full path for refile targets.
    (setq org-refile-use-outline-path t)

    ;; This option is also needed for the full path stuff to work,
    ;; without it you just get lots of repeated file names in the Ivy
    ;; selection window.  Full details in the blog post linked above.
    (setq org-outline-path-complete-in-steps nil)

    ;; Allow refiling to a new parent heading.
    (setq org-refile-allow-creating-parent-nodes 'confirm)

    ;; Custom function to quickly archive all done tasks.
    (defun rt/org-archive-done-tasks ()
      (interactive)
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
       "/DONE" 'tree)
      ;; I'm sure this could be done better as part of the
      ;; org-map-entries function above but I'm not sure how so just
      ;; repeat for cancelled tasks.
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
       "/CANCELLED" 'tree))


    ;; org-agenda
    (setq org-agenda-files '("~/org/todo.org" "~/org/someday-maybe.org" "~/org/cal.org")
          org-agenda-skip-deadline-if-done t
          org-agenda-skip-scheduled-if-done t)

    ;; org-crypt
    (org-crypt-use-before-save-magic)

    (setq org-tags-exclude-from-inheritance (quote ("crypt")))

    ;; GPG key to use for encryption
    ;; Either the Key ID or set to nil to use symmetric encryption.
    (setq org-crypt-key "0x4799AD5040FF28FB5F3D71D7667A3481E4BB34F3"))
#+END_SRC

Set active Org Babel languages

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((clojure    . t)
     (css        . t)
     (emacs-lisp . t)
     (java       . t)
     (js         . t)
     (makefile   . t)
     (org        . t)
     (python     . t)
     (ruby       . t)
     (shell      . t)
     (sql        . t)))
#+end_src

[[https://github.com/integral-dw/org-superstar-mode][Org Superstar]] makes bullets prettier, it is a direct descendant of
org-bullets.

#+begin_src emacs-lisp
  (use-package org-superstar
    :config
    (setq org-superstar-special-todo-items t
          org-superstar-headline-bullets-list '(" "))
    (add-hook 'org-mode-hook (lambda ()
                               (org-superstar-mode 1))))
#+end_src

** Markdown

[[http://jblevins.org/projects/markdown-mode/][Markdown Mode]] is a major mode for Markdown offering syntax highlighting
and preview as well as other niceties.

Markdown command is set to [[http://fletcherpenney.net/multimarkdown/][multimarkdown]] so that needs installed on the system.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc")
    :hook (markdown-mode . markdown-toc-mode))
#+END_SRC

Generate table of contents within Markdown files with [[https://github.com/ardumont/markdown-toc][markdown-toc]].

#+BEGIN_SRC emacs-lisp
  (use-package markdown-toc
    :blackout)
#+END_SRC

** YAML

[[https://www.emacswiki.org/emacs/YamlMode][Yaml mode]]

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode (("\\.yml$" . yaml-mode)
         ("\\.yaml$" . yaml-mode)
         ("\\.sls$" . yaml-mode))) ; SaltStack
#+END_SRC

** Python

Setup Python mode

#+BEGIN_SRC emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  (setq fill-column 79)
  (setq python-check-command "flake8")
  (setq tab-width 4))
#+END_SRC

[[https://github.com/proofit404/anaconda-mode][Anaconde mode]] offers code navigation, documentation lookup, and completion
for Python.

#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :init
  (progn
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode)))
#+END_SRC

[[https://github.com/proofit404/company-anaconda][company-anaconda]] is an Anaconda backend for Company.

#+BEGIN_SRC emacs-lisp
(use-package company-anaconda
  :init (add-to-list 'company-backends 'company-anaconda))
#+END_SRC

** Jinja2

[[https://melpa.org/#/jinja2-mode][Jinja2 Mode]] is a major mode for the jinja2 templating language.

#+BEGIN_SRC emacs-lisp
(use-package jinja2-mode
  :mode ("\\.j2\\'" . jinja2-mode))
#+END_SRC

** Just

[[https://github.com/casey/just][Just]] is a command runner that is similar to Make but is a bit nicer to
work with.  This persuades Emacs to use makefile mode for ~justfile~.

#+begin_src emacs-lisp
  (use-package make-mode
    :elpaca nil
    :mode (("justfile\\'" . makefile-mode)))
#+end_src

** Go

[[https://github.com/dominikh/go-mode.el][Go mode]]

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode ("\\.go\\'" . go-mode)
    :init
    (setq compile-command "go build -v && go test -v")
    (setq compilation-read-command nil)
    :hook (before-save . gofmt-before-save))
#+END_SRC

** Rust

[[https://github.com/rust-lang/rust-mode][Rust-mode]] -- A major mode for Rust.

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode ("\\.rs\\'" . rust-mode)
  :config
  (setq rust-format-on-save t))
#+END_SRC

[[https://github.com/kwrooijen/cargo.el][Cargo.el]] -- A minor mode for Cargo the Rust build tool, it adds some
convenient bindings for running Cargo commands.

#+begin_src emacs-lisp
  (use-package cargo
    :hook (rust-mode . cargo-minor-mode))
#+end_src

** Clojure

[[https://github.com/borkdude/clj-kondo/][clj-kondo]] a Clojure linter via flycheck.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clj-kondo)
#+END_SRC

[[https://github.com/clojure-emacs/clojure-mode][Clojure Mode]] is a major mode for Clojure.

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :mode (("\\.clj\\'" . clojure-mode)
           ("\\.cljs\\'" . clojurescript-mode)
           ("\\.cljc\\'" . clojurec-mode)
           ("\\.boot\\'" . clojure-mode))
    :hook ((clojure-mode . eldoc-mode)
           (clojure-mode . subword-mode)
           (clojure-mode . smartparens-strict-mode)
           (clojure-mode . rainbow-delimiters-mode)
           (clojure-mode . clj-refactor-mode))
    :config (require 'flycheck-clj-kondo))
#+END_SRC

[[https://cider.readthedocs.io/en/latest][CIDER]] is the Clojure(Script) Interactive Development Environment that Rocks!

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :after clojure-mode
    :commands (cider cider-connect cider-jack-in)
    :bind ("C-c M-j" . cider-jack-in)
    :custom
    (cider-boot-parameters "cider repl -s wait")
    (cider-repl-display-help-banner nil)
    (cider-repl-result-prefix "=> "))
#+END_SRC

[[https://github.com/clojure-emacs/clj-refactor.el][clj-refactor]] is a collection of functions for refactoring Clojure code.

#+BEGIN_SRC emacs-lisp
  (use-package clj-refactor
    :config
    ;; This choice of keybinding leaves cider-macroexpand-1 unbound
    (cljr-add-keybindings-with-prefix "C-c C-r")
    (setq cljr-warn-on-eval nil)
    :blackout)
#+END_SRC

** Terraform

[[https://github.com/syohex/emacs-terraform-mode][Terraform Mode]] is a major mode for editing Terraform files.

#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :config
    ;; Need to add this hook for formatting via 'terraform fmt' to work.
    (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode)
    (setq terraform-indent-level 2
          terraform-format-on-save t))
#+END_SRC

** Web Mode

[[http://web-mode.org/][Web-mode]] for editing web templates -- can syntax highlight
appropriately for embedded CSS or Javascript.

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode (("\\.html\\'" . web-mode)
         ("\\.css\\'" . web-mode)
         ("\\.j2\\'" . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)

  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-auto-expanding t)
  (setq web-mode-enable-css-colorization t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)

  (setq web-mode-engines-alist
    '(("jinja2"    . "\\.j2\\'"))))
#+END_SRC

** JavaScript / TypeScript

[[https://github.com/mooz/js2-mode][JS2 Mode]] is an improved Javascript mode.

Set indent-tabs-mode to true for JS files as Smart Tabs is enabled for
JS.  Without this Smart Tabs would do its thing but then upon saving
the globally enabled Whitespace Cleanup mode would set tabbed
indentation back to spaces.


#+begin_src emacs-lisp
  (use-package js2-mode
    :mode ("\\.js\\'")
    :init
    (add-hook 'js2-mode-hook
              (lambda ()
                (setq indent-tabs-mode t))))
#+end_src

[[https://github.com/ananthakumaran/tide][Tide]] is the canonical way of using TypeScript within Emacs.

#+begin_src emacs-lisp
  (use-package tide
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
#+end_src

** C

Similar to JS mode use Smart Tabs for C code and make sure Whitespace
Cleanup doesn't clobber tabs upon save.

#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
          (lambda ()
            (setq indent-tabs-mode t)))
#+END_SRC

** RestClient

Mode for working with REST APIs.

#+begin_src emacs-lisp
(use-package restclient
  :mode ("\\.http\\'" . restclient-mode))
#+end_src

** Shell

Use tabs in shell scripts otherwise heredoc functionality around
whitespace can be weird.

#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-hook
          (lambda ()
            (setq indent-tabs-mode t)))
#+END_SRC

** Nix

[[https://github.com/NixOS/nix-mode/][Nix Mode]] -- An Emacs major mode for editing Nix expressions. There is
also a manual available at nix-mode.org.

#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

* Extras
** Sqlite3

[[https://github.com/pekingduck/emacs-sqlite3-api][sqlite3]] is a dynamic module for GNU Emacs 25+ that provides direct
access to the core SQLite3 C API from Emacs Lisp.

#+begin_src emacs-lisp
  (use-package sqlite3)
#+end_src

** Ediff

#+begin_src emacs-lisp
(use-package ediff
  :elpaca nil
  :config
  ;; Use the selected frame for ediff rather that a new one.
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; Split window into vertical panes, better for wider screens.
  (setq ediff-split-window-function 'split-window-horizontally)

  ;; expand everything that can be expanded before ediffing
  ;; this is useful for org-mode and code folding
  :hook (ediff-prepare-buffer . outline-show-all))
#+end_src

