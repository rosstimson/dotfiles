#+STARTUP: content

* General
** System settings

#+BEGIN_SRC emacs-lisp
;; i18n
(prefer-coding-system 'utf-8)

;; Reduce the frequency of garbage collection by making it happen on
;; each 50MB of allocated data (the default is on every 0.76MB)
(setq gc-cons-threshold 50000000)

;; Warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)
#+END_SRC

Emacs might need access to executables that are stored in some custom
locations, for example a Rust tool installed via ~cargo~ or a Python
tool installed via `pip install --user`. This is essentially the Emacs
equivalent of your system's ~$PATH~.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "~/.local/bin")        ;; Python, pip installed
  (add-to-list 'exec-path "~/code/go/bin")       ;; Go
  (add-to-list 'exec-path "~/.cargo/bin")        ;; Rust
  (add-to-list 'exec-path "~/.npm-global/bin")   ;; JS, NPM / Yarn installed
#+END_SRC

Set some defaults

#+BEGIN_SRC emacs-lisp
  (setq-default
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   display-time-default-load-average nil            ; Don't display load average
   help-window-select t                             ; Focus new help windows when opened
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   kill-ring-max 128                                ; Maximum length of kill ring
   load-prefer-newer t                              ; Prefers the newest version of a file
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t)                                ; Always open read-only buffers in view-mode
#+END_SRC

** Personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Ross Timson"
      user-mail-address "me@rosstimson.com")
#+END_SRC

** Backups

Put backups in a sensible location rather than scattered all over the place.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk is cheap. Save lots.

#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t)    ; Don't delink hardlings
(setq version-control t)      ; Use version numbers on backups
(setq delete-old-versions t)  ; Automatically delete excess backups
(setq kept-new-versions 20)   ; How many of the newest versions to keep
(setq kept-old-versions 5)    ; How many of the oldest version to keep
#+END_SRC

** Interface

Remove a bunch of cruft from the interface.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inihibt-startup-echo-area-message "rosstimson")
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

Set some further UI options.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(blink-cursor-mode -1)
(global-hl-line-mode t)
(line-number-mode t)
(column-number-mode t)
(setq-default indicate-empty-lines t)
#+END_SRC

Stop the annoying bloody beeping.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

Set default font.

#+BEGIN_SRC emacs-lisp
(set-frame-font "Fira Mono 10" nil t)
#+END_SRC

Stop resizing the frame all the time and just start emacs maximised.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC

Short form yes/no questions.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p #'y-or-n-p)
#+END_SRC

Smooth scrolling.

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 5
      scroll-conservatively 9999
      scroll-step 1)
#+END_SRC

Set my custom colour theme.

#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'rosstimson-muted t)
#+END_SRC

Get a bunch of other themes.

#+BEGIN_SRC emacs-lisp
(use-package base16-theme)
#+END_SRC

Allow easy movement between windows/splits.

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
#+END_SRC

** Recent files

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (setq recentf-max-saved-items 50
        recentf-auto-cleanup 100
        recentf-exclude (list "/\\.git/.*\\'" ; Git contents
                              "/elpa/.*\\'"   ; Package files
                              ".*\\.gz\\'"
                              "TAGS"
                              ".*-autoloads\\.el\\'"
                              "/tmp"
                              "/ssh:"
                              "company-statistics-cache\.el"
                              "custom\.el"))
  (recentf-mode t))
#+END_SRC

** iBuffer

Use [[https://www.emacswiki.org/emacs/IbufferMode][ibuffer]] which is a better menu/switcher for buffers.  Most of this
config has been taken from [[http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html][Tips for using Emacs Ibuffer]].

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :bind ("C-x C-b" . ibuffer)
  :config
  ;; Don't prompt to delete unmodified buffers.
  (setq ibuffer-expert t)

  ;; Organise ibuffer into groups of related stuff.
  (setq ibuffer-saved-filter-groups
    '(("default"
      ("Dired" (mode . dired-mode))
      ("Org" (or (mode . org-mode)
        (mode . org-agenda-mode)))
      ("Programming" (or (mode . python-mode)
                         (mode . go-mode)
                         (mode . rust-mode)
                         (mode . clojure-mode)))
      ("Web" (mode . web-mode))
      ("Shell" (or (mode . eshell-mode)
        (mode . shell-mode)
        (mode . term-mode)))
      ("Magit" (name . "\*magit\*"))
      ("Mu4e" (name . "\*mu4e\*"))
      ("Emacs" (or (name . "^\\*scratch\\*$")
        (name . "^\\*Messages\\*$")
        (name . "^\\*Warnings\\*$")
        (name . "\*Help\*")
        (name . "\*Apropos\*")
        (name . "\*info\*")
        (name . "^\\*anaconda-mode\\*$")
        (mode . ag-mode)))
  )))

  ;; ibuffer-auto-mode is a minor mode that automatically keeps the
  ;; buffer list up to date.
  (add-hook 'ibuffer-mode-hook
            '(lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Don't show empty filter groups.
  (setq ibuffer-show-empty-filter-groups nil))
#+END_SRC

** Eshell

#+BEGIN_SRC emacs-lisp
(use-package eshell
  :commands eshell
  :bind ("C-x e" . eshell)
  :init
  (setq eshell-aliases-file (concat user-emacs-directory "eshell.aliases")
        eshell-cmpl-ignore-case t
        eshell-history-size 1024)

  ;; Visual commands
  (setq eshell-visual-commands '("vi" "vim" "top" "htop" "less" "more" "tmux"))
  (setq eshell-visual-subcommands '(("git" "log" "diff" "show"))))
#+END_SRC

Make C-l clear eshell screen just as it would a normal shell.

#+BEGIN_SRC emacs-lisp
(defun eshell-clear-buffer ()
  "Clear terminal"
  (interactive)
  (let ((inhibit-read-only t))
        (erase-buffer)
        (eshell-send-input)))

(add-hook 'eshell-mode-hook
'(lambda()
  (local-set-key (kbd "C-l") 'eshell-clear-buffer)))
#+END_SRC

** Hippie-expand

[[https://www.emacswiki.org/emacs/HippieExpand][HippieExpand]] looks at the word before point and tries to expand it in various ways.

#+BEGIN_SRC emacs-lisp
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+END_SRC

** Global Key Bindings

I often split the window and nearly always want to switch to the new
window in order to open a new file.  This will switch automatically so
I don't have the extra step.

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
(global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
#+END_SRC

** Tabs vs Spaces

Default to spaces for indentation.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

* Minor Modes
** which-key

[[https://github.com/justbur/emacs-which-key][which-key]] is a package that displays available keybindings in popup.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode t)
  :diminish which-key-mode)
#+END_SRC

** Smart Tabs

Use [[https://www.emacswiki.org/emacs/SmartTabs][Smart Tabs]] for certain langs/modes.  Smart Tabs offers semantic
way of using tab characters in source code: tabs for indentation,
spaces for alignment.

#+BEGIN_SRC emacs-lisp
(use-package smart-tabs-mode
  :config
  (smart-tabs-insinuate 'c 'c++ 'java 'javascript)
)
#+END_SRC

** Smart Mode Line

Prettify the mode line with [[https://github.com/Malabarba/smart-mode-line][Smart Mode Line]].

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :config
  (setq sml/no-confirm-load-theme t)
  (setq sml/theme 'respectful)
  (sml/setup)

  ;; Shorten certain paths with 'directory prefixes'.
  (add-to-list 'sml/replacer-regexp-list '("^~/code/dotfiles/" ":DOT:") t))
#+END_SRC

** Smex

Use Smex so that ~Counsel-M-x~ which is bound to ~M-x~ will show
commands in order of last used.  Without this Counsel just lists
alphabetically.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :init (smex-initialize))
#+END_SRC

** Ivy / Counsel / Swiper

Use [[https://github.com/abo-abo/swiper][Swiper]] and friends for searching and ido-like completion.

Ivy, a generic completion mechanism for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :bind (("C-x b" . ivy-switch-buffer)
         ("C-c C-r" . ivy-resume))
  :config
  (ivy-mode)
  (setq ivy-fixed-height-minibuffer t)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-format-function 'ivy-format-function-line) ; Highlight entire line in Ivy completion buffer.
  :diminish ivy-mode)
#+END_SRC

Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-x f" . counsel-recentf)
         ("C-c j" . counsel-git-grep)
         ("C-c k" . counsel-rg)
         ("C-c m" . counsel-imenu)
         ("M-y" . counsel-yank-pop)
         :map ivy-minibuffer-map
         ("M-y" . ivy-next-line-and-call)))
#+END_SRC

Swiper, an Ivy-enhanced alternative to isearch.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))
#+END_SRC

** Dumb Jump

[[https://github.com/jacktasia/dumb-jump][Dump Jump]] allows you to jump to definition similar to Etags but without the
extra config and need for tag files.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g p" . dump-jump-back)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config
  (setq dumb-jump-default-project "~/code")
  (setq dumb-jump-selector 'ivy))
#+END_SRC

** Avy

Quick navigation by jumping to things with [[https://github.com/abo-abo/avy][Avy]].

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind (("M-g c" . avy-goto-char)
         ("M-g w" . avy-goto-word-1)
         ("M-g l" . avy-goto-line))
  :config
  (avy-setup-default))
#+END_SRC

** Ace-link

Quickly follow links with [[https://github.com/abo-abo/ace-link][Ace-link]].

#+BEGIN_SRC emacs-lisp
(use-package ace-link
  :config
  (ace-link-setup-default)
  (define-key org-mode-map (kbd "M-o") 'ace-link-org))
#+END_SRC

** Switch-window

Quickly switch between windows with [[https://github.com/dimitri/switch-window][switch-window]].

#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :bind ("C-x o" . switch-window)
  :config
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
    '("a" "r" "s" "t" "n" "e" "i" "o"))
  (setq switch-window-threshold 2))
#+END_SRC

** Projectile

Use [[https://github.com/bbatsov/projectile][Projectile]] which makes working within a project a lot nicer.  For example
you can use search (with Ivy) for files just within the project.  A project
is defined by a .git (others supported) in the top level dir.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1)
  (setq projectile-enable-caching t
  projectile-completion-system 'ivy))
#+END_SRC

** Ripgrep

Projectile has a handy ~projectile-ripgrep~ function but it does not
work until the Ripgrep frontend package is installed.

#+begin_src emacs-lisp
  (use-package ripgrep)
#+end_src

** Paradox

[[https://github.com/Malabarba/paradox][Paradox]] is an enhanced package list/utility.

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :commands (paradox-upgrade-packages paradox-list-packages)
  :config
  (setq paradox-execute-asynchronously t))
#+END_SRC

** Magit

[[https://magit.vc/][Magit]] the one and only Git frontend.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-c g" . magit-status)
  :config
  (setq magit-completing-read-function 'ivy-completing-read))
#+END_SRC

** Dired

Dired is the directory listing / file manager.  When on BSD it will
complain: 'ls does not support --dired', rather than installing GNU
Coreutils just for this just work around it with very minor
limitations.

#+BEGIN_SRC emacs-lisp
  (when (string= system-type "berkeley-unix")
    (setq dired-use-ls-dired nil))
#+END_SRC

Use human readable file sizes.

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-lah")
#+END_SRC

Allow visiting of files via 'a' key which won't create multiple Dired
buffers for each dir visited, this is disabled by default and a
warning message will appear.

#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** Whitespace

[[https://www.emacswiki.org/emacs/WhiteSpace][WhiteSpace]], a mode to toggle visibility of whitespace.

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :bind ("C-c w" . whitespace-mode)
    :config
    (setq whitespace-line-column 80)
    (setq whitespace-style '(face tabs spaces indentation lines-tail empty trailing)))
#+END_SRC

Automatically cleanup unnecessary whitespace with [[https://github.com/purcell/whitespace-cleanup-mode][whitespace-cleanup-mode]]. 

#+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :init
  (global-whitespace-cleanup-mode t)) ; Enabled globally
#+END_SRC

** Undo-tree

[[https://www.emacswiki.org/emacs/UndoTree][UndoTree]] lets you visualise undo.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :init (global-undo-tree-mode)
  :diminish undo-tree-mode)
#+END_SRC

** Company

Auto-completion via [[https://company-mode.github.io/][Company]].

#+BEGIN_SRC emacs-lisp
(use-package company
  :init (global-company-mode)
  :diminish company-mode
  :config
  (setq company-tooltip-align-annotations t
        company-tooltip-flip-when-above t
        ;; Easy navigation to candidates with M-<n>
        company-show-numbers t))

  ;; Add custom completion for Org mode code blocks.
  (add-to-list 'company-backends 'company-org-block)
#+END_SRC

[[https://github.com/company-mode/company-statistics][Company-statistics]] sorts completion candidates by previous completion choices.

#+BEGIN_SRC emacs-lisp
(use-package company-statistics
  :after company
  :config (company-statistics-mode))
#+END_SRC

[[https://github.com/rafalcieslak/emacs-company-terraform][Company-terraform]] is a Company backend for Terraform files.

#+BEGIN_SRC emacs-lisp
(use-package company-terraform
  :after company
  :config (company-terraform-init))
#+END_SRC

** LSP

[[https://github.com/emacs-lsp/lsp-mode][LSP Mode]] -- Emacs client/library for the Language Server Protocol 

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :hook ((python-mode . lsp)
         (rust-mode . lsp)
         (go-mode . lsp)
         (clojure-mode . lsp)
         (js2-mode . lsp))
  :commands lsp
  :config
  (setq lsp-rust-server 'rust-analyzer))

(use-package company-lsp
    :commands company-lsp)
#+END_SRC

** Rainbow delimiters

Highlight parens etc. by depth with [[https://www.emacswiki.org/emacs/RainbowDelimiters][Rainbow Delimiters]].

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Flyspell

Check my spelling on the fly with [[https://www.emacswiki.org/emacs/FlySpell][FlySpell]]. Requires `hunspell` to be installed.
This also spellchecks spelling in programming mode but only within comments.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :config
    (setq ispell-program-name "hunspell")
    (setq ispell-local-dictionary "en_GB")
    (setq ispell-local-dictionary-alist
          ;; Please note the list `("-d" "en_GB")` contains ACTUAL parameters passed to hunspell
          ;; You could use `("-d" "en_GB,en_US")` to check with multiple dictionaries
          '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_GB") nil utf-8)))

    :hook ((text-mode . flyspell-mode)
           (org-mode . flyspell-mode))
    :diminish (flyspell-mode . "Spell"))
#+END_SRC

Use Ivy to select spelling corrections.

#+begin_src emacs-lisp
(use-package flyspell-correct-ivy
  :bind ("C-M-;" . flyspell-correct-at-point)
  :init
  (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+end_src

** Smartparens

Deal with pairs of things with [[https://github.com/Fuco1/smartparens][Smartparens]].

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :commands (smartparens-mode smartparens-strict-mode)
  :config
  (require 'smartparens-config)
  (sp-use-smartparens-bindings))
#+END_SRC

** ElDoc

#+BEGIN_SRC emacs-lisp
(use-package eldoc)
#+END_SRC

** Iedit

Edit multiple regions in the same way simultaneously with [[https://github.com/victorhge/iedit][Iedit]].

#+BEGIN_SRC emacs-lisp
(use-package iedit
  :commands (iedit-mode iedit-rectangle-mode)
  :bind ("C-;" . iedit-mode))
#+END_SRC

** Cut/Copy/Comment current line if no region selected

In many editors cut and copy act on the current line if no text is
visually selected, [[https://github.com/purcell/whole-line-or-region/blob/master/whole-line-or-region.el][whole-line-or-region]] does just that for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
  :config
  (add-to-list 'whole-line-or-region-extensions-alist
    '(comment-dwim whole-line-or-region-comment-dwim-2 nil))
  (whole-line-or-region-mode 1)
  :diminish whole-line-or-region-local-mode)
#+END_SRC

** Emmet

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :bind ("C-<return>" . emmet-expand-line)
  :config
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'html-mode-hook 'emmet-mode))
#+END_SRC

** YASnippet

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template
system for Emacs.

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1)
)
#+end_src

[[https://github.com/AndreaCrotti/yasnippet-snippets/][YASnippet-snippets]],
the official collection of snippets for many languages.

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnipet
)
#+end_src

* Major Modes / Language Specific Stuff
** Org

[[http://orgmode.org/][Org mode]] - Your life in plain text.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org
    :ensure org-plus-contrib
    :mode ("\\.org$'" . org-mode)
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c l" . org-store-link))
    :config
    ;; Load extra Org modules from contrib
    (add-to-list 'org-modules 'org-protocol)
    (add-to-list 'org-modules 'org-contacts)
    (add-to-list 'org-modules 'org-crypt)
    (add-to-list 'org-modules 'org-habit)

    ;; Syntax highlight code blocks and make tabs work as expected.
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t)

    (setq org-directory "~/org")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    (setq org-log-done 'time)
    (setq org-log-done-with-time t)
    (setq org-log-into-drawer t)
    (setq org-completion-use-ido t)

    ;; Follow links with RET.
    (setq org-return-follows-link t)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)")))

    ;; Function needed to integrate org-journal with org capture.
    ;; https://github.com/bastibe/org-journal/#journal-capture-template
    (defun org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      ;; Position point on the journal's top-level heading so that org-capture
      ;; will add the new entry as a child entry.
      (goto-char (point-min)))

    (defvar rt/org-contacts-template "* %(org-contacts-template-name)
    :PROPERTIES:
    :EMAIL: %(org-contacts-template-email)
    :PHONE: %^{+44 1234 123456}
    :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
    :BIRTHDAY: %^{yyyy-mm-dd}
    :NOTE: %^{NOTE}
    :END:" "Template for org-contacts.")
  
    ;; Capture templates
    (setq org-capture-templates
      `(("t" "Todo" entry (file+headline ,(concat org-directory "/todo.org") "Inbox") "* TODO %?\n  %i\n")
        ("s" "Someday / Maybe" entry (file+headline ,(concat org-directory "/someday-maybe.org") "Inbox") "* TODO %?\n  %i\n")
        ("n" "Notes" entry (file+headline ,(concat org-directory "/notes.org") "Inbox") "* %^{NOTES} \n%<%Y-%m-%d %H:%M>\n %?\n %i\n")
        ("l" "Link" entry (file+headline ,(concat org-directory "/links.org") "Inbox") "* %a %^g\n %?\n %i" :prepend t)
        ("j" "Journal entry" entry (function org-journal-find-location)
         "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
        ("c" "Contacts" entry (file "~/org/contacts.org"),
         rt/org-contacts-template
         :empty-lines 1)))

    ;; Refile targets
    (setq org-refile-targets
          '(("todo.org" :maxlevel . 3)
            ("someday-maybe.org" :maxlevel . 3)
            ("links.org" :maxlevel . 3)
            ("cal.org" :maxlevel . 3)))

    ;; https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
    ;; Show full path for refile targets.
    (setq org-refile-use-outline-path t)
    ;; This option is also needed for the full path stuff to work,
    ;; without it you just get lots of repeated file names in the Ivy
    ;; selection window.  Full details in the blog post linked above.
    (setq org-outline-path-complete-in-steps nil)
    ;; Allow refiling to a new parent heading.
    (setq org-refile-allow-creating-parent-nodes 'confirm)

    ;; Custom function to quickly archive all done tasks.
    (defun rt/org-archive-done-tasks ()
      (interactive)
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
       "/DONE" 'tree)
      ;; I'm sure this could be done better as part of the
      ;; org-map-entries function above but I'm not sure how so just
      ;; repeat for cancelled tasks.
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
       "/CANCELLED" 'tree)))
#+END_SRC

Org Agenda

#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :ensure nil
    :after org
    :custom
    (org-agenda-files '("~/org/todo.org" "~/org/someday-maybe.org" "~/org/cal.org"))
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-scheduled-if-done t))
#+END_SRC

Org Contacts

#+begin_src emacs-lisp
  (use-package org-contacts
    :ensure nil
    :after org
    :custom (org-contacts-files '("~/org/contacts.org")))
#+end_src

Org-Crypt

#+BEGIN_SRC emacs-lisp
  (use-package org-crypt
    :ensure nil
    :after org
    :config
    (org-crypt-use-before-save-magic)

    (setq org-tags-exclude-from-inheritance (quote ("crypt")))

    ;; GPG key to use for encryption
    ;; Either the Key ID or set to nil to use symmetric encryption.
    (setq org-crypt-key "0x4799AD5040FF28FB5F3D71D7667A3481E4BB34F3")

    ;; Auto-saving does not cooperate with org-crypt.el: so you need
    ;; to turn it off if you plan to use org-crypt.el quite often.
    ;; Otherwise, you'll get an (annoying) message each time you
    ;; start Org.
    (setq auto-save-default nil))
#+END_SRC

Journal

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :after org
    :bind ("C-c T" . org-journal-new-entry)
    :config
    (defun org-journal-file-header-func (time)
      "Custom function to create journal header."
      (concat
       (pcase org-journal-file-type
         (`daily "#+TITLE: Daily Journal\n#+STARTUP: showeverything")
         (`weekly "#+TITLE: Weekly Journal\n#+STARTUP: folded")
         (`monthly "#+TITLE: Monthly Journal\n#+STARTUP: folded")
         (`yearly "#+TITLE: Yearly Journal\n#+STARTUP: folded"))))

    (defun org-journal-save-entry-and-exit()
      "Simple convenience function.
    Saves the buffer of the current day's entry and kills the window
    Similar to org-capture like behavior"
      (interactive)
      (save-buffer)
      (kill-buffer-and-window))

    ;; Key binding for the above function
    (define-key org-journal-mode-map (kbd "C-x C-s") 'org-journal-save-entry-and-exit)

    (setq org-journal-file-header 'org-journal-file-header-func)
    :custom
    (org-journal-file-type 'monthly)
    (org-journal-date-format "%A, %d %B %Y")
    (org-journal-dir (format (concat org-directory "/journal/") (format-time-string "%Y")))
    (org-journal-enable-encryption t))
#+END_SRC


Set active Org Babel languages

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (makefile . t)
   (org . t)
   (python . t)
   (shell . t)
   (sql . t)))
#+END_SRC

#+begin_src emacs-lisp
(require 'ox-beamer)
#+end_src

#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :commands (org-caldav-sync)
    :after (org)
    :config
    (setq org-caldav-debug-level 2
          org-caldav-show-sync-results t
          org-caldav-url "https://caldav.fastmail.com/dav/calendars/user/me@rosstimson.com"
          org-icalendar-timezone "Europe/London"
          ;; never delete anything at the CALDAV end
          org-caldav-delete-calendar-entries 'never
          org-caldav-inbox '(file+headline "~/org/cal.org" "Inbox")
          org-caldav-files '("~/org/cal.org")
          org-caldav-calendar-id "530726a6-d153-4195-b3dc-18f2985aea53"
          org-caldav-sync-direction 'cal->org))
#+end_src

** Markdown

[[http://jblevins.org/projects/markdown-mode/][Markdown Mode]] is a major mode for Markdown offering syntax highlighting
and preview as well as other niceties.

Markdown command is set to [[http://fletcherpenney.net/multimarkdown/][multimarkdown]] so that needs installed on the system.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc")
    :hook (markdown-mode . markdown-toc-mode))
#+END_SRC

Generate table of contents within Markdown files with [[https://github.com/ardumont/markdown-toc][markdown-toc]].

#+BEGIN_SRC emacs-lisp
  (use-package markdown-toc
    :diminish markdown-toc-mode)
#+END_SRC

** YAML

[[https://www.emacswiki.org/emacs/YamlMode][Yaml mode]]

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode (("\\.yml$" . yaml-mode)
         ("\\.yaml$" . yaml-mode)
         ("\\.sls$" . yaml-mode))) ; SaltStack
#+END_SRC

** Python

Setup Python mode

#+BEGIN_SRC emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  (setq fill-column 79)
  (setq python-check-command "flake8")
  (setq tab-width 4))
#+END_SRC

Make working with Pipenv in Emacs easier with [[https://github.com/pwalsh/pipenv.el][pipenv.el]].

#+BEGIN_SRC emacs-lisp
(use-package pipenv
  :hook (python-mode . pipenv-mode)
  :init
  (setq
   pipenv-projectile-after-switch-function
   #'pipenv-projectile-after-switch-extended))
#+END_SRC

[[https://github.com/proofit404/anaconda-mode][Anaconde mode]] offers code navigation, documentation lookup, and completion
for Python.

#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :init
  (progn
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode)))
#+END_SRC

[[https://github.com/proofit404/company-anaconda][company-anaconda]] is an Anaconda backend for Company.

#+BEGIN_SRC emacs-lisp
(use-package company-anaconda
  :init (add-to-list 'company-backends 'company-anaconda))
#+END_SRC

** Jinja2

[[https://melpa.org/#/jinja2-mode][Jinja2 Mode]] is a majore mode for the jinja2 templating language.

#+BEGIN_SRC emacs-lisp
(use-package jinja2-mode
  :mode ("\\.j2\\'" . jinja2-mode))
#+END_SRC

** Go

[[https://github.com/dominikh/go-mode.el][Go mode]]

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :mode ("\\.go\\'" . go-mode)
  :hook (before-save . gofmt-before-save))
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode ("\\.rs\\'" . rust-mode)
  :config
  (setq rust-format-on-save t))
#+END_SRC

** Clojure

[[https://github.com/clojure-emacs/clojure-mode][Clojure Mode]] is a major mode for Clojure.

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :mode (("\\.clj\\'" . clojure-mode)
           ("\\.cljs\\'" . clojurescript-mode)
           ("\\.cljc\\'" . clojurec-mode)
           ("\\.boot\\'" . clojure-mode))
    :hook ((clojure-mode . eldoc-mode)
           (clojure-mode . subword-mode)
           (clojure-mode . smartparens-strict-mode)
           (clojure-mode . rainbow-delimiters-mode)
           (clojure-mode . clj-refactor-mode))
    :config (require 'flycheck-clj-kondo))
#+END_SRC

[[https://cider.readthedocs.io/en/latest][CIDER]] is the Clojure(Script) Interactive Development Environment that Rocks!

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :after clojure-mode
    :commands (cider cider-connect cider-jack-in)
    :bind ("C-c M-j" . cider-jack-in)
    :custom
    (cider-boot-parameters "cider repl -s wait")
    (cider-repl-display-help-banner nil)
    (cider-repl-result-prefix "=> "))
#+END_SRC

[[https://github.com/clojure-emacs/clj-refactor.el][clj-refactor]] is a collection of functions for refactoring Clojure code.

#+BEGIN_SRC emacs-lisp
  (use-package clj-refactor
    :config
    ;; This choice of keybinding leaves cider-macroexpand-1 unbound
    (cljr-add-keybindings-with-prefix "C-c C-r")
    (setq cljr-warn-on-eval nil)
    :diminish clj-refactor-mode)
#+END_SRC

[[https://github.com/borkdude/flycheck-clj-kondo][flycheck-clj-kondo]] integrates [[https://github.com/borkdude/clj-kondo/][clj-kondo]] a Clojure linter with flycheck.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clj-kondo)
#+END_SRC

** Terraform

[[https://github.com/syohex/emacs-terraform-mode][Terraform Mode]] is a major mode for editing Terraform files.

#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
  :config
  (setq terraform-indent-level 2))
#+END_SRC

** Web Mode

[[http://web-mode.org/][Web-mode]] for editing web templates -- can syntax highlight
appropriately for embedded CSS or Javascript.

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode (("\\.html\\'" . web-mode)
         ("\\.css\\'" . web-mode)
         ("\\.j2\\'" . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)

  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-auto-expanding t)
  (setq web-mode-enable-css-colorization t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)

  (setq web-mode-engines-alist
    '(("jinja2"    . "\\.j2\\'"))))
#+END_SRC

** Javascript / JS2

[[https://github.com/mooz/js2-mode][JS2 Mode]] is an improved Javascript mode.

Set indent-tabs-mode to true for JS files as Smart Tabs is enabled for
JS.  Without this Smart Tabs would do its thing but then upon saving
the globally enabled Whitespace Cleanup mode would set tabbed
indentation back to spaces.

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode ("\\.js\\'")
  :init
  (add-hook 'js2-mode-hook
            (lambda ()
              (setq indent-tabs-mode t))))
#+END_SRC

** C

Similar to with JS mode use Smart Tabs for C code and ensure
Whitespace Cleanup doesn't clobber tabs upon save.

#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
          (lambda ()
            (setq indent-tabs-mode t)))
#+END_SRC

** RestClient

Mode for working with REST APIs.

#+begin_src emacs-lisp
(use-package restclient
  :mode ("\\.http\\'" . restclient-mode))
#+end_src

** Shell

Use tabs in shell scripts otherwise heredoc functionality around
whitespace can be weird.

#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-hook
          (lambda ()
            (setq indent-tabs-mode t)))
#+END_SRC

* Extras
** Email / mu4e

#+BEGIN_SRC emacs-lisp
(require 'smtpmail)

(setq send-mail-function 'smtpmail-send-it
      smtpmail-smtp-server "smtp.fastmail.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type 'ssl)
#+END_SRC

Use [[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] to read email with Emacs.

#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :ensure nil
  :load-path "/usr/local/share/emacs/site-lisp/mu4e"
  :commands (mu4e mu4e-compose-new)
  :config
  (setq mu4e-maildir (expand-file-name "~/.mail/rosstimson")
        mu4e-get-mail-command "mbsync -a"
        mu4e-sent-folder "/Sent"
        mu4e-drafts-folder "/Drafts"
        mu4e-trash-folder "/Trash"))
#+END_SRC

** Ediff

#+begin_src emacs-lisp
(use-package ediff
  :config
  ;; Use the selected frame for ediff rather that a new one.
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; Split window into vertical panes, better for wider screens.
  (setq ediff-split-window-function 'split-window-horizontally)

  ;; expand everything that can be expanded before ediffing
  ;; this is useful for org-mode and code folding
  :hook (ediff-prepare-buffer . outline-show-all))
#+end_src

