# Checks if a command exists, something like 'which' could be used
# instead of 'command -v' but 'which' is non-standard and shellcheck
# will report it as such and will suggest 'command -v'.
#
# This function is mainly used to test for commands with 'it' statements like so:
#     if _command_exists pyenv; then
#         echo "Command exists so do something"
#     fi
installed() {
	command -v "$1" >/dev/null 2>&1
}


# Get the env vars of a running process
# Example: penv docker
#
# NOTE: Using the sudo/doas alias '_' here rather than hard-coding to
# one orr the other.
penv() {
	_ sh -c "tr '\0' '\n' < /proc/$(pgrep "$1")/environ"
}


# Create a new Clojure application using Boot: https://boot-clj.com
# Example: bna myapp
bna() {
	boot -d boot/new new -t app -n "$1"
}


# Emacs Client
#
# (https://www.emacswiki.org/emacs/EmacsClient#toc18)
#
# This is aimed at users that use GUI.
#
#   * It creates a new frame if it doesnâ€™t exist or opens the given
#     file in the existing frame.
#   * The function has a built-in EmacsPipe functionality (e.g. echo
#     "foo" | em -).
#   * Both GUI and TUI instances can be created without issues. For
#     TUI just use -nw, -t or --tty switch like you would normally.
e()
{
	args=""
	nw=false
	# check if emacsclient is already running
	if pgrep -U "$(id -u)" emacsclient > /dev/null; then running=true; fi

	# check if the user wants TUI mode
	for arg in "$@"; do
		if [ "$arg" = "-nw" ] || [ "$arg" = "-t" ] || [ "$arg" = "--tty" ]
		then
			nw=true
		fi
	done

	# if called without arguments - open a new gui instance
	if [ "$#" -eq "0" ] || [ "$running" != true ]; then
		args=(-c "$args")		# open emacsclient in a new window
	fi
	if [ "$#" -gt "0" ]; then
		# if 'em -' open standard input (e.g. pipe)
		if [[ "$1" == "-" ]]; then
			TMP="$(mktemp /tmp/emacsstdin-XXX)"
			cat >"$TMP"
			args=($args --eval '(let ((b (generate-new-buffer "*stdin*"))) (switch-to-buffer b) (insert-file-contents "'${TMP}'") (delete-file "'${TMP}'"))')
		else
			args=($@ $args)
		fi
	fi

	# emacsclient $args
	if $nw; then
		emacsclient "${args[@]}"
	else
		(nohup emacsclient "${args[@]}" > /dev/null 2>&1 &) > /dev/null
	fi
}
